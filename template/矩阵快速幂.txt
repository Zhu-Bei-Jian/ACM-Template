struct Matrix{
 long long mat[2][2];
 }; Matrix mul_M(Matrix a,Matrix b,long long mod){
 Matrix ret;
 for(int i = 0;i < 2;i++)
 for(int j = 0;j < 2;j++){
 ret.mat[i][j] = 0;
 for(int k = 0;k < 2;k++){
 ret.mat[i][j] += a.mat[i][k]*b.mat[k][j]%mod;
 if(ret.mat[i][j] >= mod)ret.mat[i][j] = mod;
 }
 }
 return ret;
 }
 Matrix pow_M(Matrix a,long long n,long long mod){
 Matrix ret;
 memset(ret.mat,0,sizeof(ret.mat));
 for(int i = 0;i < 2;i++)ret.mat[i][i] = 1;
 Matrix tmp = a;
 if(n&1)ret = mul_M(ret,tmp,mod);
 tmp = mul_M(tmp,tmp,mod);
 n >>= 1;
 }
 return ret;
 }
 long long pow_m(long long a,long long n,long long mod)//a^b % mod{
 long long ret = 1;
 long long tmp = a%mod;
while(n){
 if(n&1)ret = ret*tmp%mod;
 tmp = tmp*tmp%mod;
 n >>= 1;
 }
 return ret;
}